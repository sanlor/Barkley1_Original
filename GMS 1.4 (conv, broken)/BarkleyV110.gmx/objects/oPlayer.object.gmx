<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite45</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oItem</parentName>
  <maskName>sMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
x=xstart-4; //This is so I start correctly on 16x16 grid
//x-=4;
pspd=2.5; //player speed
ghost=0;
ambattler=0; //used to see how many battlers for creating grid
allwalk=0; //if 1 always walking
walk=0;
cut=20;
tt=0;
t=0;
ll=0;
cou=0;
vou=0; //jump deal
jm=0; //jump statiser
jcou=0; //jump gravity
action=0; //not doing anything
shadow=1; //if 0 no shadow
shw=0;
move=''; //tells where to move
mask_index=sMask;
solid=1;
face=0;
subber=0; //to specify cinema sprites
dap=0; //if 1 dont do depth
//Matters below
jumping=0;
jump=0;
spd=2.5;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//clock
vou+=global.rd*2;
repeat (floor(vou)) {
if (jumping=1) {
jcou+=.4;
jump-=3-jcou;
if (jcou&gt;=2 || jump&lt;-10) { jcou=0; jumping=0; }//jumping=2; }
} else if (jumping=2) {
jcou+=.4;
jump+=jcou;
if (jump&gt;0) { jcou=0; jump=0; jumping=0; }//jumping=0; }
}
}
vou-=floor(vou);
if (allwalk=0) walk=0;
if (move='up') { direction=90; walk=1; t=0; }
if (move='upright') { direction=45; walk=1; t=0; }
if (move='right') { direction=0; walk=1; t=1; }
if (move='downright') { direction=315; walk=1; t=1; }
if (move='down') { direction=270; walk=1; t=2; }
if (move='downleft') { direction=225; walk=1; t=2; }
if (move='left') { direction=180; walk=1; t=3; }
if (move='upleft') { direction=135; walk=1; t=3; }
if (walk=1) {
cou+=0.3*global.rd;
if (cou&gt;4) cou-=4;
shw=floor(cou);
xx=x;
yy=y;
if (move!='') move_contact_solid(direction,spd*global.rd); //max added very late
if (xx=x &amp;&amp; yy=y &amp;&amp; move!='') { //right left shifter
for (o=1; o&lt;14; o+=1) {
zx=x+lengthdir_x(o,direction-90);
zy=y+lengthdir_y(o,direction-90);
zx+=lengthdir_x(1,direction);
zy+=lengthdir_y(1,direction);
if (place_free(zx,zy)) {
move_contact_solid(direction-90,min(((o+1)*global.rd)/2,(spd*global.rd)/2));
break;
}
zx=x+lengthdir_x(o,direction+90);
zy=y+lengthdir_y(o,direction+90);
zx+=lengthdir_x(1,direction);
zy+=lengthdir_y(1,direction);
if (place_free(zx,zy)) {
move_contact_solid(direction+90,min(((o+1)*global.rd)/2,(spd*global.rd)/2));
break;
}
}
//if (place_free
}
//if (xx=x &amp;&amp; yy=y) move_contact_solid(direction-90,(spd/2)*global.rd);
//if (xx=x &amp;&amp; yy=y) move_contact_solid(direction+90,(spd/2)*global.rd);
} else {
cou=0; 
shw=1;
}
if (shw=3) shw=1;
ll=shw*24;
tt=t*32;
if (dap=0) {
if (ambattler=0) depth=-(y+32);
else depth=-(y+6);
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ghost=1) alp=0.4+random(0.2);
else alp=1;
if (ambattler=1) { y-=26; x-=12; }
if (shadow=1) draw_sprite_ext(sShadow,0,x,y+24,1,1,0,c_white,0.3);
if (sprite_get_width(sprt)&lt;60) draw_sprite(sprt,subber,x,y);
else draw_sprite_part_ext(sprt,0,ll,tt,24,32,floor(x),floor(y+jump),1,1,c_white,alp);
if (ambattler=1) { y+=26; x+=12; }</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
