<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sight=0;
alert=0;
focus=0;
yspr=125; //distance
dspr=90;
blind=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>focus=0;
x=master.x;
y=master.y;
if (instance_exists(oBarkley)) {
cx=oBarkley.x+12;
cy=oBarkley.y+28;
} else {
cx=-1;
cy=-1;
}
pt=point_distance(x,y,cx,cy);
dr=point_direction(x,y,cx,cy);
dra=point_direction(cx,cy,x,y);
if (master.t=0) direction=90;
if (master.t=1) direction=0;
if (master.t=2) direction=270;
if (master.t=3) direction=180;
fff=direction;
direction=direction-(dspr/2);
m1=direction;
direction=direction+(dspr);
m2=direction;
direction=fff-180;
direction=direction-(dspr/2);
m1a=direction;
direction=direction+(dspr);
m2a=direction;
if (pt&lt;=yspr &amp;&amp; pt&gt;blind) {
if (dr&gt;=m1 &amp;&amp; dr&lt;=m2) { if (collision_line(x,y,cx,cy,oWall,0,0)=-4) { focus=1; alert=1; } }
if (dra&gt;=m1a &amp;&amp; dra&lt;=m2a) { if (collision_line(x,y,cx,cy,oWall,0,0)=-4) { focus=1; alert=1; } }
}
direction=fff;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sight=1) {
if (focus=1) draw_set_color(c_blue);
else if (alert=0) draw_set_color(c_green);
else draw_set_color(c_red);
xx[0]=x;
yy[0]=y;
xx[1]=x+lengthdir_x(yspr,direction-(dspr/2));
yy[1]=y+lengthdir_y(yspr,direction-(dspr/2));
xx[2]=x+lengthdir_x(yspr,direction+(dspr/2));
yy[2]=y+lengthdir_y(yspr,direction+(dspr/2));
draw_line(xx[0],yy[0],xx[1],yy[1]);
draw_line(xx[1],yy[1],xx[2],yy[2]);
draw_line(xx[0],yy[0],xx[2],yy[2]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
