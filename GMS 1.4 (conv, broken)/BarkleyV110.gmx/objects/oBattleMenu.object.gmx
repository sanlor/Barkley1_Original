<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Real Used
border=0;
state='names';
state='pause';
pos0=0;
h=0; //overage
global.descriptor="";
global.movetor="";
optmax=4; //For menu
//8 - Ally, Party, Self, Enemy, All Foe
//
alarm[1]=1;
char=9;
name[0]=-999;
inf=0; //for infos
action=""; //for infos
mash=0;
sact=0; //show ation bar
asel=2; //selected box
hilight=-1;
dname=1;
dene=1;
ditem=0;
dskill=0;
ddesc=0;
draw_set_font(Doslike9);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.descriptor="";
state='names';</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.turn.finish=1;
global.turn.sprite_index=global.turn.stand;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Use item
sS(mItemUse);
sItem(ection,-1);
sBItemUse(ection,global.turn.target);
alarm[4]=15;
ection="";</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.turn.finish=1;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0; global.b_party[i]!=-999; i+=1) {
name[i]=global.b_party[i].id;
}
name[i]=-999;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.descriptor="";</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.movetor="";

if (global.b_victory!=0) {
ddesc=0;
dene=0;
dname=1;
oBattler.hilight=0;
oBattler.selecte=0;
global.turn=-1;
hilight=-999;
sact=0;  //victory
exit;
}

if (state="pause" || alarm[5]!=-1) { //for status messages etc, end battle stop all
sact=0;  //victory
exit;
}

//Attack

if (state="postshow") {
ddesc=0; dname=1; dene=1;
}

if (state="postattack") { 
ddesc=1; dname=1; dene=0;
if (global.turn.prefin=-1 &amp;&amp; global.turn.enemy=0 &amp;&amp; global.turn.attack=1) {
if (sKey(global.key_left) &amp;&amp; mash=0) { mash=1; sP(); inf-=1; if (inf&lt;0) inf=global.turn.infomax; }
if (sKey(global.key_right) &amp;&amp; mash=0) { mash=1; sP(); inf+=1; if (global.turn.info[inf]="") inf=0; }
if (sKey(global.key_right)=0 &amp;&amp; sKey(global.key_left)=0) mash=0;
global.descriptor=global.turn.infoh[inf]; global.movetor="";
} else {
ddesc=0; dene=1;
}
}

//Name menu

if (state="names") {
 oasel=asel;
 sact=1; asel=2; dname=1; dene=1; h=0;
 if (sKey(global.key_up))   { asel=0; }
 if (sKey(global.key_down)) { asel=4; }
 if (sKey(global.key_left)) { asel=1; }
 if (sKey(global.key_right)){ asel=3; }
 if (oasel!=asel) sP();
 if (global.turn!=oBCamera.id) {
  global.movetor=global.turn.option[asel];
  global.descriptor=global.turn.optiond[asel];
 }
 
 if (sKey(global.key_action,1)) { 
  global.descriptor="";
  sact=0; pos0=0; h=0; //reset position just in acase
  if (asel=2) { sP(1); pretarget="Enemy"; state='target'; action='Attack'; pos1=0; } //attack
  if (asel=1) { sP(1); h=0; state='skills'; dene=0; keyboard_clear(global.key_left); } //skills
  if (asel=0) { //defense
   sP(1); 
   h=0; state='wait'; global.turn.alarm[5]=10; global.turn.defending=1; //global.descriptor=global.turn.option[0];
   if (global.turn.object_index=oBBarkley) { global.turn.defamt=global.turn._rguard*.66; global.turn._rguard+=global.turn.defamt; } //sDamageC(global.turn,"Guard Up",c_ltgray);
   if (global.turn.object_index=oBVince) { sS(mBRecharge); sBCondition('vp',round(global.turn._rvp/5),global.turn); sBCondition('bp',round(global.turn._rbp/5),global.turn); }
   if (global.turn.object_index=oBCyberdwarf) { global.turn.defamt=global.turn._rguard/3; global.turn._rguard+=global.turn.defamt; global.b_cx=oBCyberdwarf.x; global.b_cy=oBCyberdwarf.y; global.b_cover=1; }
   if (global.turn.object_index=oBHoopz) { global.b_evade=1; }
   sVerifyStats();
   exit; 
  }
  if (asel=3) { //items
   sBattleItem();
   if (item[0]="") {
    state='pause'; global.descriptor="You have no useable items!"; alarm[5]=30; sP(-1);
   } else {
    sP(1); h=0; state='items'; dname=1; dene=0; ditem=1; keyboard_clear(global.key_right);
   }
  }
  if (asel=4) { //run
   global.temp5=0;
   with (oBattler) if (cantrun=1) global.temp5=1;
   //for (i=0; global.party[i]!=-1; i+=1) if (global.b_party[i]._vp&lt;=0) global.temp5=2;
   if (global.temp5=1) { 
    global.descriptor="Can't run from battle!"; alarm[5]=30; sP(-1);
   } else if (global.temp5=2) { 
    global.descriptor="Can't run away with a dead party member!"; alarm[5]=30; sP(-1);
   } else {
    sP(1); h=0; state='wait'; global.descriptor='Run Away'; alarm[2]=15; with (global.turn) { attack=0; sprite_index=runs; image_speed=0.25; image_xscale=-1; running=1; } exit; 
   }
  } 
 }
 
} else asel=2;

//Items

if (state="items") { //plus h on accept
 dname=1; ditem=1;
 if (sKey(global.key_cancel,1)) { sP(-1); pos0=3; state='names'; h=0; ditem=0; exit; }
 if (sKey(global.key_up,1)) { sP(); if (pos0&lt;2) { h-=2; } else pos0=max(0,pos0-2); }
 if (sKey(global.key_down,1)) { sP(); if (pos0&gt;5) { h+=2; } else pos0=min(itemmax,pos0+2); }
 if (sKey(global.key_left,1)) { sP(); if (pos0=0) { if (h!=0) { pos0=1; h-=2; } } else pos0=max(0,pos0-1); }
 if (sKey(global.key_right,1)) { sP(); if (pos0=7) { if (h!=ceil((itemmax-7)/2)*2) { pos0=6; h+=2; } } else pos0=min(itemmax,pos0+1); }
 h=min(h,ceil((itemmax-7)/2)*2);
 h=max(0,h);
 pos0=min(pos0,itemmax-h);
 global.descriptor=itemd[pos0+h];
 
 if (sKey(global.key_action,1)) { 
  sP(1); state='target'; pretarget="Ally"; action="Item"; ection=item[pos0+h]; pos1=0; hilight=-1;
  refItem(ection);
  if (string_copy(global.tEffect,1,3)="All") { //maybe make pretarget ally all
  ditem=0; dene=1;
  global.descriptor="Use " + ection;
  global.turn.target=global.turn;
  oBattler.hilight=0;
  alarm[3]=15;
  global.turn.sprite_index=global.turn.item;
  state='wait';
  exit;
  }
 } //exit was here

}

//Skills

if (state="skills") {
 dname=1; dskill=1;
 if (sKey(global.key_up,1)) { sP(); if (pos0&lt;2) { h-=2; } else pos0=max(0,pos0-2); }
 if (sKey(global.key_down,1)) { sP(); if (pos0&gt;5) { h+=2; } else pos0=min(global.turn.skillmax,pos0+2); }
 if (sKey(global.key_left,1)) { sP(); if (pos0=0) { if (h!=0) { pos0=1; h-=2; } } else pos0=max(0,pos0-1); }
 if (sKey(global.key_right,1)) { sP(); if (pos0=7) { if (h!=ceil((global.turn.skillmax-7)/2)*2) { pos0=6; h+=2; } } else pos0=min(global.turn.skillmax,pos0+1); }
 h=min(h,ceil((global.turn.skillmax-7)/2)*2);
 h=max(0,h);
 pos0=min(pos0,global.turn.skillmax-h);
 if (sKey(global.key_cancel,1)) { sP(-1); pos0=0; state='names'; h=0; dskill=0; exit; }
 if (sKey(global.key_action,1)) { 
  refSkill(global.turn.skill[pos0+h]);
  cost=global.c_mp; pos1=0;
  if (cost&lt;=global.turn._bp) { sP(1); dskill=0; dene=1; state='target'; pretarget=global.turn.skilla[pos0+h]; action=global.turn.skill[pos0+h]; doskill=pos0+h; pos1=0; } 
  else sP(-1);
 } //exit
 global.movetor="BP " + string(global.turn._bp) + "/" + string(global.turn._rbp);
 global.descriptor="Target " + global.turn.skilla[pos0+h];
}

//Targetting

if (state='target') {
 if (sKey(global.key_cancel,1)) { 
  if (action='Item') { sP(-1); state='items'; ditem=1; dene=0; hilight=-1; oBattler.selecte=0; exit; }
  else if (action='Attack') { sP(-1); state='names'; dname=1; dene=1; hilight=-1; oBattler.selecte=0; exit; }
  else { sP(-1); state='skills'; dskill=1; dene=0; hilight=-1; oBattler.selecte=0; exit; } //skill
 }
 
 refSkill(action); //has is pretart=""
 cost=global.c_mp;
 doskill=global.c_event;
 if (action="Attack") {
  global.descriptor="Choose an enemy to attack.";
 } else if (action="Item") {
  if (ection="Golden Potato") {
   instance_create(0,0,oBHiratio);
   state='pause'; dname=1; dene=1; ditem=0; dskill=0; ddesc=0;
   global.descriptor="Potato Chaos";
   oBattler.hilight=0;
   exit;
  }
 } else { global.descriptor="Target " + global.turn.skilla[pos0+h] + " with " + global.turn.skill[pos0+h]; }
 if (pretarget='Ally') {
  dname=1;
  if (action='Item') global.movetor="Use item on:";
  if (sKey(global.key_up,1)) { sP(); pos1=max(0,pos1-1); }
  if (sKey(global.key_down,1)) { sP(); pos1+=1; }
  sIntTarget(0,1);
  if (target[pos1]="") pos1-=1;
  hilight=targetid[pos1];
 } else if (pretarget='Enemy') {
  dname=1;
  if (action='Item') global.movetor="Choose enemy to attack:";
  if (sKey(global.key_up,1)) { sP(); pos1=max(0,pos1-2); }
  if (sKey(global.key_left,1)) { sP(); pos1=max(0,pos1-1); }
  if (sKey(global.key_right,1)) { sP(); pos1+=1; }
  if (sKey(global.key_down,1)) { sP(); pos1+=1; if (target[pos1]="") pos1-=1; pos1+=1; }
  sIntTarget(1);
  if (target[pos1]="") pos1-=1;
  hilight=targetid[pos1];
 } else if (pretarget="Self") {
  global.b_obj=global.turn;
  global.turn.exec=doskill;
  pretarget=""; 
  global.turn.target=global.turn;
  state='wait';
  oBattler.hilight=0;
  global.turn._bp-=cost;
  global.descriptor=action;
  exit;
 } else if (pretarget="All Foe" || pretarget='All Ally') {
  global.b_obj=global.turn;
  global.turn.exec=doskill;
  pretarget=""; 
  state='wait';
  oBattler.hilight=0;
  global.turn._bp-=cost; //reduce bp because it exits
  global.descriptor=action;
  exit;
 }
 oBattler.selecte=0;
 targetid[pos1].selecte=1;
 
 if (sKey(global.key_action,1)) { 
  sP(1); ditem=0; dene=1; hilight=-1;
  global.descriptor=action;
  global.turn.target=targetid[pos1];
  oBattler.hilight=0; oBattler.selecte=0;
  if (action='Attack') {
   global.turn.attack=1;
   global.b_obj=global.turn;
   inf=0;
   state='postattack';
  } else if (action="Item") {
   global.descriptor="Use " + ection + " on " + global.turn.target.name;
   alarm[3]=15;
   global.turn.sprite_index=global.turn.item;
   state='wait';
  } else { //skill, item etc
   global.turn._bp-=cost;
   global.turn.exec=doskill;
   global.b_obj=global.turn;
   state='wait';
  }
 }
 
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//146-73
if (view_current=0) exit;
//Set box position
x=view_xview[0]+9+gxx;
y=view_yview[0]+169+gyy;
//draw action boxes
if (sact=1) { 
 wx=global.turn.x-58; wy=global.turn.y-5; ws=24;//i added -4 ws=24;
 draw_sprite_ext(sBIcon,5,wx+2,wy-ws+2,1,1,0,c_black,.25);
 draw_sprite_ext(sBIcon,6,wx-ws+2,wy+2,1,1,0,c_black,.25);
 draw_sprite_ext(sBIcon,7,wx+2,wy+2,1,1,0,c_black,.25);
 draw_sprite_ext(sBIcon,8,wx+ws+2,wy+2,1,1,0,c_black,.25);
 draw_sprite_ext(sBIcon,9,wx+2,wy+ws+2,1,1,0,c_black,.25);
 draw_sprite(sBIcon,0,wx,wy-ws);
 draw_sprite(sBIcon,1,wx-ws,wy);
 draw_sprite(sBIcon,2,wx,wy);
 draw_sprite(sBIcon,3,wx+ws,wy);
 draw_sprite(sBIcon,4,wx,wy+ws);
 if (asel=0) draw_sprite(sBIcon,5,wx,wy-ws);
 if (asel=1) draw_sprite(sBIcon,6,wx-ws,wy);
 if (asel=2) draw_sprite(sBIcon,7,wx,wy);
 if (asel=3) draw_sprite(sBIcon,8,wx+ws,wy);
 if (asel=4) draw_sprite(sBIcon,9,wx,wy+ws);
}

draw_sprite_ext(sBStats,0,x+2,y+2,1,1,0,c_black,.25);
draw_sprite(sBStats,0,x,y); //9,169

if (dname=1) { //235,8 - 13 y space
 sIntTarget(0,1);
 for (i=0; i&lt;4; i+=1) {
  if (target[i]="") { 
   break; 
  } else {
   if (global.turn=targetid[i]) draw_sprite(sBHilight,0,x+233,y+6+(i*13));
   if (hilight=targetid[i]) draw_sprite_ext(sBHilight2,0,x+233,y+6+(i*13),1,1,0,c_red,0.5);
   sDrawBox(x+235,y+7+(i*13),'magic',targetid[i]);
   sDrawBox(x+260,y+7+(i*13),'health',targetid[i]);
   draw_sprite(sBFace,targetid[i].facet,x+286,y+7+(i*13));
  }
 }
}

if (dene=1) { 
 draw_set_color(c_white); //90, 196
 sIntTarget(1);
 for (i=0; i&lt;8; i+=1) {
  if (target[i]="") { 
   break; 
  } else {
   if (global.turn=targetid[i]) draw_sprite(sBHilight,1,x+6+((i mod 2)*108),y+6+((i div 2)*13));
   if (hilight=targetid[i]) draw_sprite_ext(sBHilight2,1,x+6+((i mod 2)*108),y+6+((i div 2)*13),1,1,0,c_red,0.5);
   sDrawBox(x+88+((i mod 2)*108),y+7+((i div 2)*13),'health',targetid[i]);
   draw_text(x+7+((i mod 2)*108),y+5+((i div 2)*13),target[i]);
  }
 }
}

if (ddesc=1) {
 draw_sprite(sBattleArrow1,1,x-2,y+25);
 draw_sprite(sBattleArrow1,0,x+218,y+25);
 draw_set_color(c_white);
 if (global.turn.object_index=oBCyberdwarf &amp;&amp; inf&gt;0 &amp;&amp; inf&lt;4) draw_sprite(sBCyber0,inf-1,x+1,y+1);
 else draw_text_ext(x+8,y+4,global.turn.info[inf],-1,209);
}

if (ditem=1) { 
 ix=2; iy=6; draw_set_color(c_white);
 if (h+7&lt;itemmax) draw_sprite(sBattleArrow,0,x+209,y+58);
 if (h!=0) draw_sprite(sBattleArrow,1,x+209,y-2);
 for (i=0; i&lt;8; i+=1) {
  if (item[i+h]="") { 
   break; 
  } else { //1 - 160, 25 -41
   if (pos0=i) {
    draw_sprite(sBHilight,2,x+5+((i mod 2)*107),y+iy-1+((i div 2)*13));
    if (state!="target") {
    draw_sprite_ext(sBDesc,0,x+2,y+2-160,1,1,0,c_black,.25); draw_sprite(sBDesc,0,x,y-160);
    draw_text_ext(x+8-1,y+4-1-160,iteme[i+h],-1,288);
    }
   }
   draw_sprite(sBX,0,x+87+7+((i mod 2)*107),y+6+iy+((i div 2)*13));
   draw_text(x+91+7+((i mod 2)*107),y+iy-1+((i div 2)*13),itemq[i+h]);
   draw_text(x+6+((i mod 2)*107),y+iy-1+((i div 2)*13),item[i+h]);
  }
 }
}

if (dskill=1) { //need skill instead of item references
 ix=2; iy=6; draw_set_color(c_white);
 if (h+7&lt;global.turn.skillmax) draw_sprite(sBattleArrow,0,x+209,y+58); //4
 if (h!=0) draw_sprite(sBattleArrow,1,x+209,y-2);
 for (i=0; i&lt;8; i+=1) {
  if (global.turn.skill[i+h]="") { 
   break; 
  } else { //1 - 160, 25 -41
   if (pos0=i) {
    draw_sprite(sBHilight,2,x+5+((i mod 2)*107),y+iy-1+((i div 2)*13));
    draw_sprite_ext(sBDesc,0,x+2,y+2-160,1,1,0,c_black,.25); draw_sprite(sBDesc,0,x,y-160);
    draw_text_ext(x+8-1,y+4-1-160,global.turn.skilld[i+h],-1,288);
   } //80,120,220
   draw_sprite(sBattleBox,0,x+6+((i mod 2)*107),y+iy+((i div 2)*13));
   draw_set_color(make_color_rgb(80,120,220));
   draw_text(x+8+((i mod 2)*107),y+iy-1+((i div 2)*13),global.turn.skillp[i+h]);
   draw_set_color(c_white);
   draw_text(x+23+((i mod 2)*107),y+iy-1+((i div 2)*13),global.turn.skill[i+h]);
  }
 }
}

if (global.descriptor!="") {
 draw_set_color(c_black);
 draw_text(x+5,y-10,global.descriptor);
 draw_text(x+3,y-10,global.descriptor);
 draw_text(x+4,y-11,global.descriptor);
 draw_text(x+4,y-9,global.descriptor);
 draw_set_color(c_white);
 draw_text(x+4,y-10,global.descriptor);
}
if (global.movetor!="") {
 draw_set_color(c_black);
 draw_text(x+231,y-10,global.movetor);
 draw_text(x+233,y-10,global.movetor);
 draw_text(x+232,y-11,global.movetor);
 draw_text(x+232,y-9,global.movetor);
 draw_set_color(c_white);
 draw_text(x+232,y-10,global.movetor);
}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
