<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Default values
_vp=100;
_bp=10;
_power=1;
_guard=1;
_speed=1;
_brain=1;
_exp=1;
_gold=1;
_rvp=999;
//Conditions, and immunes
i_glaucoma=0;
i_diabetes=0;
i_parkinsons=0;
c_glaucoma=0; gou=3;
c_diabetes=0;
c_parkinsons=0;
c_aspergers=0; aou=10; d_s=0; //hurts sprite
c_slowed=0; c_sou=0;
c_stroke=0; s_s=0; c_kou=0;
c_montezuma=0; c_mou=0;
c_handicapable=0; c_hou=0;
c_fouled=0;
//Moves
for (i=0; i&lt;8; i+=1) { move[i]=""; movn[i]=100; }
//Flash effect
alp=1; //alpha
col=c_white;
col_use=-1; //If not -1 it uses this as base color
col_stray=0; //merge color + random color
col_duration=0;
//
shake=0; sx=0; sy=0; //on hit shake
hilight=0; //if yes draw hilighted sprite
selecte=0; //when choose target
der=0; fgf=0; //Hilighting
enemy=1; //default enemy
exec=-1; //event to get data
wdoing=-1; //enemy only
img=1; //quicker image single
doing=-1; //actively doing
fixated=floor(random(5)); //fixated ai
footx=0;
footy=0;
fx=x;
fy=y;
alarm[11]=1; //apply shit after
finish=0; //when 1 means turn is done
//Not really needed but here for ease
fff=0; //to do starts and to advance stages
cou=0; //counter
//
stage=0; //for enemy
stop=0; //if 1 stop enemy draw event
editing=0; //if 1, stop certain draw things. cyberdwarf &gt; zomballer suplex
//Kills
kill=0; kex=0; //1 would fade, kex does random to play sound or cut
cut=0; //on 1 cut in half
explode=0; //kill explode
blacker=0; //black death
//Player stuff only
prefin=-1;
running=0;
defending=0; defamt=0; //on 1 do defend
attack=0; //for player, on 1 allow hits
noshake=0; //balthios
stand=sprite_index;
option[0]="Defend";
optiond[0]="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
option[1]="Skillz";
optiond[1]="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
option[2]="Attack";
optiond[2]="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
option[3]="Item";
optiond[3]="Use an item on an ally.";
option[4]="Escape";
optiond[4]="Run from battle. %33 chance of success.";
option[5]="";
won=0;
cantrun=0;
canthit=0;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x-=footx;
y-=footy;
xstart=x;
ystart=y;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (variable_local_exists("_rbp")=0) {
_rvp=9;
_rbp=9;
_rpower=9;
_rspeed=9;
_rguard=9;
_rbrain=9;
}
_hvp=floor(_rvp/2);
_hbp=floor(_rbp/2);
_hpower=floor(_rpower/2);
_hguard=floor(_rguard/2);
_hspeed=floor(_rspeed/2);
_hbrain=floor(_rbrain/2);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (enemy=1 &amp;&amp; variable_local_exists('level')) refEnemy(orgname,level);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//End turn
x=slav.x-footx;
y=slav.y-footy;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//20-66
fx=x+footx;
fy=y+footy; //26
depth=-fy;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(oDebugger)=0) exit;
//_bp-=1;
//hilight=!hilight;
//col_use=make_color_rgb(random(255),random(255),random(255));
//col_duration=10+random(20);
//col_stray=random(.25);
//sBCondition('inflict','fouled',id);
//sVerifyStats();
sBCondition('inflict','diabetes',id);
sBCondition('inflict','handicapable',id);
exit;
if (global.b_debug=1) sBCondition('cure',get_string("cure what?","stroke"),id);
exit;
shake=10;
_vp-=50;
sBCondition('inflict','diabetes',id);
sVerifyStats();</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(oDebugger)=0) exit;
sBCondition('inflict','diabetes',id);
//_vp=0;
//kill=1;
mw=floor(random(4));
if (mw=0) { sBCondition('guard',-ceil(_guard*.2),id); }
if (mw=1) { sBCondition('power',-ceil(_power*.2),id); }
if (mw=2) { sBCondition('speed',-ceil(_speed*.2),id); }
if (mw=3) { sBCondition('brain',-ceil(_brain*.2),id); }
//show_message(string(_vp));
//kill=1;
//shake=10;
//if (global.b_debug=1) {
//sBCondition('inflict',get_string("Inflict what?","diabetes"),id);
//sBCondition('inflict','handicapable',id);
//sBCondition('inflict','montezuma',id);
//sBCondition('inflict','fouled',id);
//}
//exit;
//sBCondition('inflict','stroke',id);
//sVerifyStats();
//_vp=0;
//exit;
//_vp=1;
//show_message(string(_vp) + " " +string(_rvp));
exit;
kill=1;
_vp=0;
exit;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Do this event after draw
if (global.b_victory=0) {
if (oBattleMenu.state!='wait' &amp;&amp; oBattleMenu.state!='postshow' &amp;&amp; oBattleMenu.state!='postattack') {
nx=fx;
ny=fy+5;
if (_xpower!=0) {
draw_sprite(sBI,0,nx-13,ny)
if (_xpower&gt;0) { draw_sprite(sBI,4,nx-13,ny-7); }
if (_xpower&lt;0) { draw_sprite(sBI,5,nx-13,ny+7); }
}
if (_xguard!=0) {
draw_sprite(sBI,1,nx-6,ny)
if (_xguard&gt;0) { draw_sprite(sBI,4,nx-6,ny-7); }
if (_xguard&lt;0) { draw_sprite(sBI,5,nx-6,ny+7); }
}
if (_xspeed!=0) {
draw_sprite(sBI,2,nx+1,ny)
if (_xspeed&gt;0) { draw_sprite(sBI,4,nx+1,ny-7); }
if (_xspeed&lt;0) { draw_sprite(sBI,5,nx+1,ny+7); }
}
if (_xbrain!=0) {
draw_sprite(sBI,3,nx+8,ny)
if (_xbrain&gt;0) { draw_sprite(sBI,4,nx+8,ny-7); }
if (_xbrain&lt;0) { draw_sprite(sBI,5,nx+8,ny+7); }
}
}
}

if (hilight=1) {
//arrow draw was here
draw_set_blend_mode(bm_add);
if (der=0) fgf+=0.1;
else fgf-=0.1;
if (fgf&gt;1) der=!der;
if (fgf&lt;0) der=!der;
draw_sprite_ext(sprite_index,img,x,y,image_xscale,image_yscale,0,col,fgf);
draw_set_blend_mode(bm_normal);
}
x-=sx; y-=sy; x-=px; y-=py; //Shake and parkinsons
if (c_handicapable=1) draw_sprite(sHandicapped,0,x,y);
if (c_glaucoma=1) {
gou-=1;
if (gou&lt;0) {
gou=3+floor(random(2));
faz=instance_create(x-15+random(30),y-15+random(30),oGlaucoma);
faz.depth=depth-1;
}
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This executes after the create event
slav=(instance_create(x,y,oBDummy));
//Name
if (enemy=1) {
 //Get name
 global.temp=id;
 global.temp2=1;
 with (object_index) {
  num=global.temp2;
  if (global.temp=id) break;
  else global.temp2+=1;
 }
 if (instance_number(object_index)!=1) name=orgname + "" +string(num); //had a space before
 else name=orgname;
}

alarm[10]=2;//Set minus caps
alarm[9]=1; //refenemy
//Set minus counters, max is 25 as defined in condition script
_xvp=0;
_xbp=0;
_xpower=0;
_xguard=0;
_xspeed=0;
_xbrain=0;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (view_current!=0) exit;
px=0; py=0; sx=0; sy=0;
if (hilight=1) draw_sprite(sArrower,0,x,fy);
if (selecte=1) draw_sprite_ext(sArrower,1,x,fy,1,1,0,c_white,.5);
if (won!=0) {
if (_vp&gt;0) {
sprite_index=cele;
image_speed=0.2;
}
exit;
}

if (kill!=0) {
if (kex=0 &amp;&amp; enemy=1) { 
kex=1; cut=floor(random(2)); 
if (cut=1) sS(mKillcut); else {
if (floor(random(2))) sS(mKillfade); 
else { (instance_create(x-sprite_xoffset,y-sprite_yoffset,oBExplode)).master=id; sS(mKillbake); }
}
}
if (enemy=1 &amp;&amp; cut=0) {
alp-=0.05;
if (alp&lt;0) instance_destroy();
exit;
} else if (cut=0) { sprite_index=deads; defending=0; shake=0; exit; }
}

if (cut!=0) {
xfx=x-sprite_xoffset;
yfy=y-sprite_yoffset;
alp=abs(((1/(sprite_width/2))*min(cut,sprite_width/2))-1);
draw_sprite_part_ext(sprite_index,1,0,0,sprite_width,sprite_height/2,xfx-cut,yfy,1,1,c_white,alp);
draw_sprite_part_ext(sprite_index,1,0,sprite_height/2,sprite_width,sprite_height/2,xfx+cut,yfy+sprite_height/2,1,1,c_white,alp);
cut+=2+(cut/10);
if (cut&gt;sprite_width/2) instance_destroy();
stop=1;
exit;
}

if (c_slowed=1 &amp;&amp; doing=-1) {
image_speed=0.05;
}

if (c_parkinsons=1) {
px=-1+random(2);
py=-1+random(2);
x+=px;
y+=py;
}

if (c_aspergers=1 &amp;&amp; doing=-1 &amp;&amp; attack=0) {
aou-=1-(c_slowed/2);
if (aou&lt;0) { 
if (enemy=0) {
aou=floor(random(3));
if (aou=0) sprite_index=runs;
if (aou=1) sprite_index=defend;
if (aou=2) sprite_index=hurts;
//image_index=floor(random(100));
}
image_index=floor(sprite_get_number(sprite_index));
aou=8+random(10); 
}
}

if (c_stroke=1 &amp;&amp; doing=-1 &amp;&amp; attack=0) {
if (enemy=0) { sprite_index=deads; shake=0; }
else { image_angle=90; s_s=1; }
} else if (enemy=1 &amp;&amp; s_s=1) { image_angle=0; s_s=0; }

if (c_fouled=1 &amp;&amp; running=0) image_index=0;

if (shake&gt;0) {
c_stroke=0; //added
shake-=1;
sx=-(shake/2)+random(shake);
sy=-(shake/2)+random(shake);
x+=sx;
y+=sy;
if (enemy=1 || noshake=1) img=0;
else if (d_s=0) { d_s=1; r_s=sprite_index; sprite_index=hurts; }
} else if (enemy=0) {
//if (sprite_index=hurts &amp;&amp; c_aspergers=0) { sprite_index=r_s; }
if (sprite_index=hurts &amp;&amp; c_aspergers=0 &amp;&amp; d_s=1) { sprite_index=r_s; }
d_s=0;
}

if (defending=1) {
if (c_stroke=0) sprite_index=defend;
}

if (col_use!=-1 &amp;&amp; col_duration&gt;0) {
col_duration-=1;
col=merge_color(col_use,make_color_rgb(random(255),random(255),random(255)),col_stray);
} else col=c_white;

if (c_diabetes=1) col=merge_color(col,c_fuchsia,0.5);
if (c_montezuma=1) col=merge_color(col,c_olive,0.5);</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
